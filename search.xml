<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[再次测试]]></title>
    <url>%2F2023%2F08%2F28%2F%E5%86%8D%E6%AC%A1%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[记录一下手机流量卡办理起因 1.本人很久之前办理一张浙江的移动卡，是打着流量卡的幌子那种 浙江卡的套路是这样的：先给你说流量30g，月租19，先让人上头， 再给你说，办卡后激活充值50元返还120元，每个月10块，返还一年， 这样的情况下，你的月租19，也就是没有返还的话就是29，特别坑，还有增值服务， 于是我就自己上网找，看在哪里能办到不套路的流量卡，终于，我找到了一个 类似的。 这个其实也是有套路的，也是19元，80流量，50g通用，30g定向，冲50返还120， 我寻思这不就是和以前差不多，mad，但是别急，听我给你说，我是自己去那种号卡平台注册的 他是会给你返佣金的，就是我办理这张卡激活后，月租原价29，加上返还120，月租现价19，使用一个与 号卡平台给你返回几十到100不等的佣金，这样岂不是等于拜票了一点 注意 2.其实这种卡，和以前的套路都一样，不过是现在找到了返还佣金的手段。 等于是为办卡的人减少了被坑的钱财，我这里在号卡平台注册了一家店， 大家如果有兴趣，可以来店里看看各种卡，如果成功激活可以找我免费返还一个月月租 店铺地址:&gt;https://haokawx.lot-ml.com/Product/Index/117184 当然，如果大家自己本身就不嫌麻烦，这里提供号卡平台地址， 方便大家自己注册，给自己办卡赚佣金，以下是号卡平台地址 号卡平台地址:&gt;https://haoka.lot-ml.com/login.html 不过注册需要填写邀请手机号，大家可以网上搜一下！]]></content>
  </entry>
  <entry>
    <title><![CDATA[博客文章的创建及上传]]></title>
    <url>%2F2019%2F09%2F26%2F%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[搭建好博客不写文章那还能是博客吗 我是为什么想起来写这个博客的呢？ 嗯，手生了，已经感觉很久没有写博客了，想着在实习公司把今天的项目总结一下（自己写的一小部分） 但是呢，突然不知道怎么写博客了，于是我就找找度娘，看了一些大哥的博客想起来是怎写的了，为了防止忘记，就把这个写下来吧！ 这样可能能记得更深。 文章的新建在你的hexo博客的路径下，首先打开git，输入以下命令:​`# hexo n &quot;title&quot;` 这其实是 hexo new &quot;你的文章名字&quot; 之后你的文章会在你的Hexo博客路径下， 具体路径:`# Hexo\source\_posts\你的文章.md` 例如我自己动手时： ![博客新建文章](博客文章的创建及上传/new.png) 于是你就创建好了这个文章，具体内容可以用Notepad++（或者其他工具）来打开文章， 这下你就可以写自己的内容了。 内容书写的格式格式就是markdown语法，在你新建的文章后缀名就是md结尾。 以下我说一下常用的md语法： ### 1.基本符号：* - +. &gt; 基本上所有的markdown标记都是基于这四个符号或组合，需要注意的是，如果以基本符号开头的标记，注意基本符号后有一个用于分割标记符和内容的空格。 ### 2.标题 前面带#号，后面带文字，分别表示h1-h6,只到h6，而且h1下面会有一条横线 1234567# 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题​ ### 3.列表 12345678910111213无序列表//形式一 + a + b + c //形式二 - d - e - f //形式三 * g * h * i 123456789有序列表//正常形式 1. abc 2. bcd 3. cde //错序效果 2. fgh 3. ghi 5. hij ### 4.引用 123456&gt; 一级引用 &gt;&gt; 二级引用 &gt;&gt;&gt; 三级引用 &gt;&gt;&gt;&gt; 四级引用 &gt;&gt;&gt;&gt;&gt; 五级引用 &gt;&gt;&gt;&gt;&gt;&gt; 六级引用 ### 5.最最最重要的是代码块 1 daliangdaima,xuyaoduohangshiyong daliangdaima,xuyaoduohangshiyong daliangdaima,xuyaoduohangshiyong daliangdaima,xuyaoduohangshiyong daliangdaima,xuyaoduohangshiyong 1 ### 6.链接 链接的文字放在[]中，链接地址放在随后的()中，链接也可以带title属性，链接地址后面空一格，然后用引号引起来 1[百度](https://www.baidu.com) ### 7.图片 和链接的形式差不多，图片的名字放在[]中，图片地址放在随后的()中，title属性（图片地址后面空一格，然后用引号引起来）,注意的是[]前要加上! 1![图片名字](图片路径) ### 8.分割线 分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以 1234561：---2：- - -3：***4：* * *5：******6：—— ### 9.字体 1.强调字体 一个星号或者是一个下划线包起来，会转换为&lt;em&gt;倾斜，如果是2个，会转换为&lt;strong&gt;加粗 1234*md* **md** _md_ __md__ markdown具体语法参考(http://www.appinn.com/markdown/#code) 感谢文章：https://www.jianshu.com/p/863f3f2d1733]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面向对象]]></title>
    <url>%2F2019%2F07%2F07%2FJava%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[面向对象（一） 若一个类不重写equals()方法，它的equals()是如何比较的 equals方法最初是在所有类的基类Object中定义的，源码是: 1234public boolean equals(Object obj)&#123; return (this == obj); &#125;​ 很显然，默认采用==来比较，只能比较地址而不能比较内容 请解释hashCode()和equals()方法有什么联系 1.首先equals()方法对比出来的两个对象的hashCode相同，那么这两个对象是可靠的 2.hashCode()相等的两个对象他们的equals()不一定相同，hashCode不是绝对可靠的 所以，当需要对比的时候，首先用hashCode()去对比，如果hashCode()不一样，则表示这两个对象肯定不相等（也就是不必再用equal()去再对比了）,如果hashCode()相同，此时再对比他们的equal()，如果equal()也相同，则表示这两个对象是真的相同了，这样既能大大提高了效率也保证了对比的绝对正确性。 请解释Java中的概念，什么是构造函数？什么是构造函数重载？什么是复制构造函数？ 1.当新对象被创建的时候，构造函数被调用，每一个类都有构造函数。 如是程序猿没有给类提供构造函数的时候，Java编译器会为这个类创建默认的构造函数 2.构造函数重载和方法重载相似，可以为一个类创建多个构造函数，每个构造函数都有自己唯一的参数列表 根据参数不同来调用不同的构造函数 3.Java不支持想C++中那样的复制构造函数，如果不自己手写构造函数的情况下，Java不会创建默认的复制构造函数 请说明Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？ 方法覆盖又叫做方法的重写，子类重新定义父类的方法，但是必须具有相同的方法名，参数列表和放回类型 方法的重载，方法重载发生在一个类下，具有相同的方法名但是参数不同的方法 请你谈一下面向对象的”六原则一法则” 单一职责原则：一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能。在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化，好的自行车是组装车，从减震叉、刹车到变速器，所有的部件都是可以拆卸和重新组装的，好的乒乓球拍也不是成品拍，一定是底板和胶皮可以拆分和自行组装的，一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。） 开闭原则：软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：①抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；②封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性，可以参考《设计模式精解》一书中对桥梁模式的讲解的章节。） 依赖倒转原则：面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。） 里氏替换原则：任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。） 接口隔离原则：接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。） 合成聚合复用原则：优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。） 迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。 请说明如何通过反射获取和设置对象私有字段的值？ 可以通过类对象的getDeclaredField()方法字段（Field）对象，然后再通过字段对象的setAccessible(true)将其设置为可以访问，接下来就可以通过get/set方法来获取/设置字段的值了 下面的代码实现了一个反射的工具类，其中的两个静态方法分别用于获取和设置私有字段的值，字段可以是基本类型也可以是对象类型且支持多级对象操作， 例如ReflectionUtil.get(dog, “owner.car.engine.id”);可以获得dog对象的主人的汽车的引擎的ID号。 123456789import java.lang.reflect.Method; class MethodInvokeTest &#123; public static void main(String[] args) throws Exception &#123; String str = &quot;hello&quot;; Method m = str.getClass().getMethod(&quot;toUpperCase&quot;); System.out.println(m.invoke(str)); // HELLO &#125;&#125;​ 请说明重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？ 方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。 重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载； 重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则） 重载方法不能根据返回类型来区分 请判断，两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，该说法是否正确，为什么？ 不对的，如果满足x.equals(y)==true，则表示x，y的哈希码是相同的； Java中是这样规定的: (1)如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同 (2)如果两个对象的hashCode相同，它们并不一定相同。 请说明内部类可以引用他包含类的成员吗，如果可以，有没有什么限制吗？ 一个内部类对象可以访问创建它的外部类对象的内容，内部类如果不是static的，那么它可以访问创建它的外部类对象的所有属性内部类如果是sattic的，即为nested class， 那么它只可以访问创建它的外部类对象的所有static属性一般普通类只有public或package的访问修饰，而内部类可以实现static，protected，private等访问修饰。当从外部类继承的时候， 内部类是不会被覆盖的，它们是完全独立的实体，每个都在自己的命名空间内，如果从内部类中明确地继承，就可以覆盖原来内部类的方法。 请说明JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？ Java 通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。 在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。 当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。 Java的异常处理是通过5个关键词来实现的：try、catch、throw、throws和finally。 一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。 用try来指定一块预防所有”异常”的程序。 紧跟在try程序后面，应包含一个catch子句来指定你想要捕捉的”异常”的类型。 throw语句用来明确地抛出一个”异常”。 throws用来标明一个成员函数可能抛出的各种”异常”。 Finally为确保一段代码不管发生什么”异常”都被执行一段代码。 可以在一个成员函数调用的外面写一个try语句，在这个成员函数内部写另一个try语句保护其他代码。 每当遇到一个try语句，”异常“的框架就放到堆栈上面，直到所有的try语句都完成。 如果下一级的try语句没有对某种”异常”进行处理，堆栈就会展开，直到遇到有处理这种”异常”的try语句。 请判断当一个对象被当作参数传递给一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递? 是值传递。Java 编程语言只有值传递参数。 当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。 对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。 面向对象(二) 请你讲讲abstract class和interface有什么区别? 含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。 含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。 abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。 如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。 接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。 接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。 语法区别: 1.抽象类可以有构造方法，接口中不能有构造方法。 2.抽象类中可以有普通成员变量，接口中没有普通成员变量 3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。 抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。 抽象类中可以包含静态方法，接口中不能包含静态方法 抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。 一个类可以实现多个接口，但只能继承一个抽象类。 请说明一下final, finally, finalize的区别。 final用于声明属性，方法，类；分别表示属性不可变，方法不可被覆盖，类不可被继承 finally是异常处理块的一部分，是异常处理块必须执行的部分； fianlize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收的对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源 请说明面向对象的特征有哪些方面 (1)抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。 (2)继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。 (3)封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。 (4) 多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。 请你谈谈如何通过反射创建对象？ 方法一:通过类对象调用newInstance()方法，例如：String.class.newInstance() 方法二:通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器(Constructor)对象并调用其newInstance()方法创建对象， 例如:String.class.getConstructor(String.class).newInstance(“Hello”); 是否可以在static环境中访问非static变量？ 答案是不可以，因为static变量是属于类的，在类加载的时候就被初始化了，这时候非静态变量并没有加载，故静态变量不能访问。 请你讲讲什么是泛型？ 泛型，即“参数化类型”。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。 那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，类似于方法中的变量参数， 此时类型也定义成参数形式（可以称之为类型形参），然后在使用/调用时传入具体的类型（类型实参）。 12345678910111213141516171819202122public class GenericTest &#123; public static void main(String[] args) &#123; /* List list = new ArrayList(); list.add(&quot;qqyumidi&quot;); list.add(&quot;corn&quot;); list.add(100); */ List&lt;String&gt; list = new ArrayList&lt;String&gt;(); list.add(&quot;qqyumidi&quot;); list.add(&quot;corn&quot;); //list.add(100); // 1 提示编译错误 for (int i = 0; i &lt; list.size(); i++) &#123; String name = list.get(i); // 2 System.out.println(&quot;name:&quot; + name); &#125; &#125; &#125; ​ 采用泛型写法后，在//1处想加入一个Integer类型的对象时会出现编译错误，通过List， 直接限定了list集合中只能含有String类型的元素，从而在//2处无须进行强制类型转换，因为此时， 集合能够记住元素的类型信息，编译器已经能够确认它是String类型了。 面向对象(三) 请你谈谈StringBuffer和StringBuilder有什么区别，底层实现上呢？ StringBuff线程安全，StringBuilder线程不安全，底层实现，StringBuffer比StringBuilder多了Synchronized修饰符 请列举你所知道的Object类的方法并简要说明。 Object()默认构造方法。 clone() 创建并返回此对象的一个副本。 equals(Object obj) 指示某个其他对象是否与此对象“相等”。 finalize()当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。 getClass()返回一个对象的运行时类。 hashCode()返回该对象的哈希码值。 notify()唤醒在此对象监视器上等待的单个线程。 notifyAll()唤醒在此对象监视器上等待的所有线程。 toString()返回该对象的字符串表示。 wait()导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法。 wait(long timeout)导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量。 wait(long timeout, int nanos) 导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量。 请说明类和对象的区别 1.类是对某一类事物的描述，是抽象的；而对象是一个实实在在的个体，是类的一个实例。 比如：“人”是一个类，而“教师”则是“人”的一个实例。 2.对象是函数、变量的集合体；而类是一组函数和变量的集合体，即类是一组具有相同属性的对象集合体。 请你讲讲wait方法的底层原理 ObjectSynchronizer::wait方法通过object的对象中找到ObjectMonitor对象调用方法 void ObjectMonitor::wait(jlong millis, bool interruptible, TRAPS) 通过ObjectMonitor::AddWaiter调用把新建立的ObjectWaiter对象放入到 _WaitSet 的队列的末尾中然后在ObjectMonitor::exit释放锁，接着 thread_ParkEvent-&gt;park 也就是wait。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java关键字]]></title>
    <url>%2F2019%2F07%2F05%2Fjava%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[JAVA 关键字请你讲讲Java里面的final关键字是怎么用的？ 当用final修饰一个类时，表明这个类不能被继承。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。 final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。 “使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。 但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“ 对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。 请你谈谈关于Synchronized和lock synchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码。 JDK1.5以后引入了自旋锁、锁粗化、轻量级锁，偏向锁来有优化关键字的性能。 Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生； 而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； 通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 请你介绍一下volatile？ volatile关键字是用来保证有序性和可见性的。 这跟Java内存模型有关。比如我们所写的代码，不一定是按照我们自己书写的顺序来执行的，编译器会做重排序，CPU也会做重排序的， 这样的重排序是为了减少流水线的阻塞的，引起流水阻塞，比如数据相关性，提高CPU的执行效率。需要有一定的顺序和规则来保证，不然程序员自己写的代码都不知带对不对了， 所以有happens-before规则，其中有条就是volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作； 有序性实现的是通过插入内存屏障来保证的。可见性：首先Java内存模型分为，主内存，工作内存。 比如线程A从主内存把变量从主内存读到了自己的工作内存中，做了加1的操作，但是此时没有将i的最新值刷新会主内存中，线程B此时读到的还是i的旧值。 加了volatile关键字的代码生成的汇编代码发现，会多出一个lock前缀指令。 Lock指令对Intel平台的CPU，早期是锁总线，这样代价太高了，后面提出了缓存一致性协议，MESI，来保证了多核之间数据不一致性问题。 请你介绍一下Syncronized锁，如果用这个关键字修饰一个静态方法，锁住了什么？如果修饰成员方法，锁住了什么？ synchronized修饰静态方法以及同步代码块的synchronized (类.class)用法锁的是类，线程想要执行对应同步代码，需要获得类锁。 synchronized修饰成员方法，线程获取的是当前调用该方法的对象实例的对象锁。]]></content>
      <categories>
        <category>javasSE</category>
      </categories>
      <tags>
        <tag>javasSE</tag>
        <tag>关键字</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java SE基础]]></title>
    <url>%2F2019%2F07%2F05%2Fjava-SE%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[JavaSE 基础知识速览请你说说Java和PHP的区别？ PHP暂时还不支持像Java那样JIT运行时编译热点代码,但是PHP具有opcache机制,能够把脚本对应的opcode缓存在内存,PHP7中还支持配置opcache.file_cache导出opcode到文件. 第三方的Facebook HHVM也支持JIT.另外PHP官方基于LLVM围绕opcache机制构建的Zend JIT分支也正在开发测试中.在php-src/Zend/bench.php测试显示,PHP JIT分支速度是PHP 5.4的10倍. PHP的库函数用C实现,而Java核心运行时类库(jdk/jre/lib/rt.jar,大于60MB)用Java编写(jdk/src.zip), 所以Java应用运行的时候,用户编写的代码以及引用的类库和框架都要在JVM上解释执行. Java的HotSpot机制,直到有方法被执行10000次才会触发JIT编译, 在此之前运行在解释模式下,以避免出现JIT编译花费的时间比方法解释执行消耗的时间还要多的情况. PHP内置模板引擎,自身就是模板语言.而Java Web需要使用JSP容器如Tomcat或第三方模板引擎. PHP也可以运行在多线程模式下,比如Apache的event MPM和Facebook的HHVM都是多线程架构.不管是多进程还是多线程的PHP Web运行模式,都不需要PHP开发者关心和控制, 也就是说PHP开发者不需要写代码参与进程和线程的管理,这些都由PHP-FPM/HHVM/Apache实现.PHP-FPM进程管理和并发实现并不需要PHP开发者关心,而Java多线程编程需要Java开发者编码参与. PHP一个worker进程崩溃,master进程会自动新建一个新的worker进程,并不会导致PHP服务崩溃.而Java多线程编程稍有不慎(比如没有捕获异常)就会导致JVM崩溃退出.对于PHP-FPM和Apache MOD_PHP来说,服务进程常驻内存, 但一次请求释放一次资源,这种内存释放非常彻底. PHP基于引用计数的GC甚至都还没发挥作用程序就已经结束了。 请你说明一下，在Java中如何跳出当前的多重嵌套循环？ 在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。 （Java中支持带标签的break和continue语句，作用有点类似于C和C++中的goto语句，但是就像要避免使用goto一样，应该避免使用带标签的break和continue，因为它不会让你的程序变得更优雅， 很多时候甚至有相反的作用，所以这种语法其实不知道更好），根本不能进行字符串的equals比较，否则会产生NullPointerException异常。 请你讲讲&amp;和&amp;&amp;的区别？ &amp;运算符有两种用法：(1)按位与；(2)逻辑与。 &amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。 &amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。 很多时候我们可能都需要用&amp;&amp;而不是&amp;，例如在验证用户登录时判定用户名不是null而且不是空字符串，应当写为：username != null &amp;&amp;!username.equals(“”)， 二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。 int和Integer有什么区别？ ava是一个近乎纯洁的面向对象编程语言，但是为了编程的方便还是引入了基本数据类型，但是为了能够将这些基本数据类型当成对象操作， Java为每一个基本数据类型都引入了对应的包装类型（wrapper class），int的包装类就是Integer，从Java 5开始引入了自动装箱/拆箱机制，使得二者可以相互转换。Java 为每个原始类型提供了包装类型： 原始类型: boolean，char，byte，short，int，long，float，double 包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double 如：class AutoUnboxingTest { public static void main(String[] args) { Integer a = new Integer(3); Integer b = 3; // 将3自动装箱成Integer类型 int c = 3; System.out.println(a == b); // false 两个引用没有引用同一对象 System.out.println(a == c); // true a自动拆箱成int类型再和c比较 }} 我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，请你讲讲如何输出一个某种编码的字符串？ Public String translate (String str) { String tempStr = “”; try { tempStr = new String(str.getBytes(“ISO-8859-1″), “GBK”); tempStr = tempStr.trim(); } catch (Exception e) { System.err.println(e.getMessage()); } return tempStr; } 请你说明String 和StringBuffer的区别 JAVA 平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。 这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。 典型地，你可以使用StringBuffers来动态构造字符数据。 请你讲讲数组(Array)和列表(ArrayList)的区别？什么时候应该使用Array而不是ArrayList？ Array和ArrayList的不同点：Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。Array大小是固定的，ArrayList的大小是动态变化的。ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。 请你解释什么是值传递和引用传递？ 值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。所以对引用对象进行操作会同时改变原对象.一般认为,java内的传递都是值传递. 请你解释为什么会出现4.0-3.6=0.40000001这种现象？ 原因简单来说是这样：2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差。 你知道java8的新特性吗，请简单介绍一下 Lambda 表达式 − Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中。 方法引用− 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。 默认方法− 默认方法就是一个在接口里面有了一个实现的方法。 新工具− 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。 Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。 Date Time API − 加强对日期与时间的处理。 Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。 Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。 请你解释为什么重写equals还要重写hashcode？ HashMap中，如果要比较key是否相等，要同时使用这两个函数！因为自定义的类的hashcode()方法继承于Object类，其hashcode码为默认的内存地址， 这样即便有相同含义的两个对象，比较也是不相等的。HashMap中的比较key是这样的，先求出key的hashcode(),比较其值是否相等，若相等再比较equals(), 若相等则认为他们是相等的。若equals()不相等则认为他们不相等。如果只重写hashcode()不重写equals()方法，当比较equals()时只是看他们是否为同一对象（即进行内存地址的比较）, 所以必定要两个方法一起重写。HashMap用来判断key是否相等的方法，其实是调用了HashSet判断加入元素 是否相等。 重载hashCode()是为了对同一个key，能得到相同的Hash Code，这样HashMap就可以定位到我们指定的key上。 重载equals()是为了向HashMap表明当前对象和key上所保存的对象是相等的，这样我们才真正地获得了这个key所对应的这个键值对。 请你介绍一下map的分类和常见的情况 java为数据结构中的映射定义了一个接口java.util.Map;它有四个实现类,分别是HashMap Hashtable LinkedHashMap 和TreeMap. Map主要用于存储健值对，根据键得到值，因此不允许键重复(重复了覆盖了),但允许值重复。 Hashmap 是一个最常用的Map,它根据键的HashCode值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。HashMap最多只允许一条记录的键为Null;允许多条记录的值为 Null;HashMap不支持线程的同步，即任一时刻可以有多个线程同时写HashMap;可能会导致数据的不一致。如果需要同步，可以用 Collections的synchronizedMap方法使HashMap具有同步的能力，或者使用ConcurrentHashMap。 Hashtable与 HashMap类似,它继承自Dictionary类，不同的是:它不允许记录的键或者值为空;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了 Hashtable在写入时会比较慢。 LinkedHashMap 是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会比 LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关，而HashMap的遍历速度和他的容量有关。 TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。 一般情况下，我们用的最多的是HashMap,在Map 中插入、删除和定位元素，HashMap 是最好的选择。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。如果需要输出的顺序和输入的相同,那么用LinkedHashMap 可以实现,它还可以按读取顺序来排列. HashMap是一个最常用的Map，它根据键的hashCode值存储数据，根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为NULL，允许多条记录的值为NULL。 HashMap不支持线程同步，即任一时刻可以有多个线程同时写HashMap，可能会导致数据的不一致性。如果需要同步，可以用Collections的synchronizedMap方法使HashMap具有同步的能力。 Hashtable与HashMap类似，不同的是：它不允许记录的键或者值为空；它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了Hashtable在写入时会比较慢。 LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的。 在遍历的时候会比HashMap慢TreeMap能够把它保存的记录根据键排序，默认是按升序排序，也可以指定排序的比较器。当用Iterator遍历TreeMap时，得到的记录是排过序的。]]></content>
      <categories>
        <category>JavaSE</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建(顺手解决一些小问题)]]></title>
    <url>%2F2019%2F07%2F04%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[搭建Hexo个人博客（win下安装方式） ##安装前提 1.搭建前的准备 在搭建前事先下载好git工具和node.js git下载地址:&gt;https://git-scm.com/downloads 根据自己的电脑选择(一般都是64位的，被下载错了) 鉴别安装好git的方式去桌面鼠标右键会有Git GUI here 和Git Bash here node.js下载地址:&gt;https://nodejs.org/en/ 之后就一直点击next，直到安装完成！ 2.安装hexo框架 新建一个文件夹(位置随意,我是放D盘的)，比如就叫Hexo 在新建的文件下（Hexo）鼠标右键Git Bash here 可以用​node -v​来看自己是否成功安装好node 让后继续在终端输入:​npm install -g hexo-cli​ 如果下载速度不尽人意可有选择: ​npm install -g cnpm --registry=https://registry.npm.taobao.org​ 输入cnpm -v来验证是否安装好上一步以及查看版本 本地使用 1.初始化博客 我们需要在Hexo文件夹下打开Git Bash here，这个文件夹是上面我们新建的文件夹 tip:一定要在这个文件夹下初始化，不然会无法初始化，我当时就出现了这个错误。 初始化: ​hexo init​ 初始化成功最后一行显示INFO start blogging with hexo 2.新建文章 继续在终端命令下输入: ​hexo n &quot;你文章的名字&quot;​ 之后会在source/_posts目录下生成文件:你文章的名字.md 之后可以在目录下打开 编写文章，这时候我遇到了博客页面的乱码问题， 说一下我的解决方法:记事本打开编写会存在乱码问题，记事本默认ansi编码，用编辑器打开 例如Notepad++ 设置编码是utf-8这样编写保存过后就不会出现问题了 3.博客生成 核心，一定要常用: ​hexo clean,hexo g,hexo s​ 因为是第一次使用，所以用: ​hexo g​ 代表生成博客静态文件 之后每次生成博客文件都需要: ​hexo clean​ 清理一下 让后就启动服务: ​hexo s​ 通过这张图片里的地址 也就是localhost:4000在本地浏览器访问博客 好啦，你可在本地访问你的博客了 修改博客主题 通过上面的操作，我们的博客是默认主题，你可以更改主题，我的博客就是next主题 我的博客地址是:&gt;https://eyym/github.io/ 你们可以看一下感受一下主题。 修改主题的方式:在hexo下打开终端，执行: ​git clone https://github.com/theme-next/hexo-theme-next themes/next​ 其他主题资源可以自行百度，不做过多的赘述。 clone完成后打开Hexo文件下的theme目录,再打开next目录，找到:_config.yml 用编辑器打开，修改theme属性，默认是landscape，修改为next： ​# Extensions​ ​## Plugins: https://hexo.io/plugins/​ ​## Themes: https://hexo.io/themes/​ ​theme: next #注意：“theme:”后要带一个空格​ 之后就可重新启动了，还是原来的散步先clean，再g，最后s哦(hexo clean,hexo g,hexo s) _config的配置 在hexo目录下也有_config.yml文件，这个是Hexo项目的全局配置 ​1234567891011121314151617181920212223242526272829303132333435363738# Site# 站点标题title: DragonBaby308&apos;s Blog# 站点副标题subtitle: Fighting for BAT!# 站点描述description: 记住迄今为止每一次失败时有心无力的感受，“为了更美好的明天而战”。# 作者author: DragonBaby308# 语言—— 请注意，官方语言包不再支持简体中文zh-Hans，而是统一采用了zh-CNlanguage: zh-CN# 时区——默认是本地时区timezone:# URL# 站点地址url: http://106.14.153.30# 站点root，如果网站存在子目录中，url设置为&apos;http://yoursite.com/child&apos;，root设置为&apos;/child/&apos;root: /# 生成固定链接的格式permalink: :title/permalink_defaults:# Pagination# 每页文章数——关闭分页：0per_page: 10# Extensions# 主题theme: next# Deployment# 部署配置deploy: type: git repo: git@106.14.153.30:/usr/DragonBaby308/repo/blog.git branch: master​ 部署到github上1.生成GitHub仓库如果你没有GitHub账号，那么就注册一个GitHub账号；之后创建库，库名为:&gt;你起的名字.github.io（大小写敏感） 2.本地安装hexo的git部署插件再Hexo目录下打开终端: npm install --save hexo-deployer-git 3.修改本地配置文件_config.yml（Hexo目录下的配置文件）对#Deployment属性做出以下修改​1234567# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/Eyym/eyym.github.io.git #你的github.io的网址 branch: master ​ 4.部署到远端GitHub上 在终端使用命令: hexo d 部署成功后，可以在浏览器输入:&gt;https://你起的名字.github.io/ 这下就完成了，感谢您阅读我的文章！ 本文章特别鸣谢B站UP主:CodeSheep!]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇Blog]]></title>
    <url>%2F2019%2F07%2F04%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87Blog%2F</url>
    <content type="text"><![CDATA[快是实习季节，毕竟马上就要秋招了嘛 作为大三狗，也面临着很多想去遇到却又害怕触礁的事情：实习。 首先说一下我自己的感受啊，焦急，紧张，向往； 这几天我再牛客网上看了很多面试题，很多哦自己都打不上来，却又想着12号考试结束就去北京试试，所以有点紧张； 但是呢这几天时间似乎不够我去赶面试题了，所以就有点焦急； 其实吧，面对着离开学校可以去自己找工作就意味着可以独当一面了，这又是充满着向往； tips： 所以呢啰嗦了一大堆还是要自己向着自己的路走下去， 不忘初心 方得始终.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F04%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
